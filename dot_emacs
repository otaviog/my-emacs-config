;; OS
;; ==

(if (eq system-type 'windows-nt)
    (progn
      (defconst m-make-command "msbuild")
      (defconst m-c-obj-ext "obj"))
  (progn
    (defconst m-make-command "make")
    (defconst m-c-obj-ext "o")))

;; Packages
;; ========

(require 'package) ;; You might already have this line
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)

(package-initialize)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)

(setq package-list '(cmake-ide solarized-theme
			       irony company-irony company-irony-c-headers flycheck-irony
			       flycheck dracula-theme
			       elpy py-autopep8 ein jedi
			       google-c-style clang-format cuda-mode
			       magit flyspell-correct-popup powerline))


;; fetch the list of packages available

(unless package-archive-contents
  (package-refresh-contents))

;; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

;; UI
;; ==

(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
(setq visible-bell t)
(load-theme 'dracula t)
(powerline-default-theme)
(windmove-default-keybindings)

;; Files
;; =====

(set-buffer-file-coding-system 'utf-8 'utf-8-unix)
(set-default buffer-file-coding-system 'utf-8-unix)
(set-default-coding-systems 'utf-8-unix)
(set-default default-buffer-file-coding-system 'utf-8-unix)
(prefer-coding-system 'utf-8-unix)
(setq-default tab-width 4)

(define-key global-map (kbd "C-.") 'company-files)

;; Backup and Autosaves
;; --------------------

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; C++
;; ===

;; Helper functions
;; ----------------

(defun m-compile-unit ()
  (interactive)
  (let ((buf-name (buffer-name)))
    (when (string-match "^\\(.*\\)\\.\\([^.]*\\)$" buf-name)
      (let ((name (match-string 1 buf-name))
            (suffix (match-string 2 buf-name)))
        (cond ((or (string-match suffix "c\\|cc\\|C\\|cpp") (string-match suffix "h\\|hpp"))
               (compile (format "%s %s.%s" m-make-command name m-c-obj-ext))))))))
(setq compile-command m-make-command)

;; Switch fromm *.<impl> to *.<head> and vice versa
(defun m-switch-decl-impl ()
  (interactive)
  (when (file-name-extension buffer-file-name)
    (let* ((file-dir (file-name-directory buffer-file-name))
           (file-name (file-name-nondirectory (file-name-sans-extension buffer-file-name)))
           (file-suffix (file-name-extension buffer-file-name))
           (decl-suffixes '(".h" ".hpp" ".hh" ".vert"))
           (impl-suffixes '(".c" ".cpp" ".cc" ".C" ".frag" ".cu" ".cl"))
           (search-dirs '("" "../src" "../include" "../include/shapelab" "../../src"))
           (chck-suffixes (cond ((string-match file-suffix (mapconcat 'identity impl-suffixes "\\|"))
                                 decl-suffixes)
                                ((string-match file-suffix (mapconcat 'identity decl-suffixes "\\|"))
                                 impl-suffixes))))
	  (dolist (cur-suffix chck-suffixes)
		(dolist (cur-dir search-dirs)
		  (let ((cur-filename (concat file-dir cur-dir "/" file-name cur-suffix)))
			(if (file-exists-p cur-filename)
				(find-file cur-filename))))))))

;; C++ Mode
;; --------

(require 'company)
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c++-mode-hook 'company-mode)
(eval-after-load "cc-mode"
  '(progn
	 (define-key c++-mode-map [M-return] 'company-complete)
	 (define-key c++-mode-map (kbd "C-c n") 'm-compile-unit)
	 (define-key c++-mode-map (kbd "C-c f") 'clang-format-buffer)
	 (define-key c++-mode-map (kbd "C-c o") 'm-switch-decl-impl)))

(global-set-key (kbd "C-c m") 'compile)

(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
(add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
(add-hook 'c++-mode-hook 'flycheck-mode)

(defun m-c-mode-looks ()
  (linum-mode)
  (column-number-mode)
  (auto-fill-mode 80)
  (google-set-c-style))
(add-hook 'c++-mode-hook 'm-c-mode-looks)

(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

(require 'company-irony-c-headers)
(eval-after-load 'company
  '(add-to-list
    'company-backends '(company-irony-c-headers company-irony)))

;; Python mode
;; ===========

(setq elpy-rpc-backend "jedi")
(elpy-enable)

(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")

(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))


(require 'py-autopep8)
(eval-after-load "python-mode"
  '(progn
	 (define-key python-mode-map (kbd "C-c f") 'py-autopep8)))
			 
;; not all setups have pylint
;;(ignore-errors
;;(add-hook 'elpy-mode-hook (flycheck-select-checker "python-pylint"))
;;)

(add-hook 'python-mode-hook
          (lambda ()
			(define-key python-mode-map [M-return] 'company-complete)
			(define-key python-mode-map (kbd "C-c f") 'py-autopep8)
		  ))


;; Javascript mode
;; ===============


;; Latex
;; ===============

(require 'doc-view)
(add-hook 'doc-view-mode-hook 'auto-revert-mode)
(setq doc-view-resolution 300)
(add-hook 'latex-mode-hook 'flyspell-mode)

;; Global Key bindings
;; ===================

(global-set-key [f3] 'ispell-region)
(global-set-key [S-dead-grave] "`")
(global-set-key [f5] 'previous-error)
(global-set-key [f6] 'next-error)


