;; ------------ OS custom ------------
(if (eq system-type 'windows-nt)
    (progn
      (defconst m-make-command "msbuild")
      (defconst m-c-obj-ext "obj"))
  (progn
    (defconst m-make-command "make")
    (defconst m-c-obj-ext "o")))

;; ------------ Custom Variables ------
(custom-set-variables
 '(inhibit-startup-screen t)
 '(case-fold-search t)
 '(global-font-lock-mode t nil (font-lock))
 '(mouse-wheel-mode t nil (mwheel))
 '(show-paren-mode t nil (paren))
 '(transient-mark-mode t)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify))
 '(desktop-buffers-not-to-save "\\(^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|.*_flymake.*\\)$")
 '(desktop-files-not-to-save "^/[^/:]*:\\|.*_flymake\\..*")
;; '(x-select-enable-clipboard nil)
)


(require 'package) ;; You might already have this line
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)

;;(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
;;  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))

(package-initialize)

(setq package-list '(google-c-style yasnippet function-args auto-complete cmake-mode clang-format
                                    irony company-irony flycheck-irony irony-eldoc column-enforce-mode))

; fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

;; -------------------- Extra loads  --------------------------
(if (not (boundp 'emacs-d-dir))
    (defconst emacs-d-dir "~/.emacs.d"))
(add-to-list 'load-path (concat emacs-d-dir "/color-themes"))

;; ------------------ UI ---------------------------------
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
(setq visible-bell t)
(require 'firecode-theme)

;; --------------------- File -------------------------
(set-buffer-file-coding-system 'utf-8 'utf-8-unix)
(set-default buffer-file-coding-system 'utf-8-unix)
(set-default-coding-systems 'utf-8-unix)
(set-default default-buffer-file-coding-system 'utf-8-unix)
(prefer-coding-system 'utf-8-unix)

(add-hook 'before-save-hook '(lambda () (whitespace-cleanup)))
(setq-default tab-width 4)


;; ------------------ Backup and Autosaves --------------------------------
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
;; ------------------- C++ Functions ----------------------------
(require 'cmake-mode)
(add-to-list 'auto-mode-alist '("CMakeLists\\.txt\\'" . cmake-mode))
(add-to-list 'auto-mode-alist '("\\.cmake\\'" . cmake-mode))
(autoload 'magit-status "magit" nil t)

(defun m-compile-unit ()
  (interactive)
  (let ((buf-name (buffer-name)))
    (when (string-match "^\\(.*\\)\\.\\([^.]*\\)$" buf-name)
      (let ((name (match-string 1 buf-name))
            (suffix (match-string 2 buf-name)))
        (cond ((or (string-match suffix "c\\|cc\\|C\\|cpp") (string-match suffix "h\\|hpp"))
               (compile (format "%s %s.%s" m-make-command name m-c-obj-ext))))))))
(setq compile-command m-make-command)

;; Switch fromm *.<impl> to *.<head> and vice versa
(defun switch-decl-impl ()
  (interactive)
  (when (file-name-extension buffer-file-name)
    (let* ((file-dir (file-name-directory buffer-file-name))
           (file-name (file-name-nondirectory (file-name-sans-extension buffer-file-name)))
           (file-suffix (file-name-extension buffer-file-name))
           (decl-suffixes '(".h" ".hpp" ".hh" ".vert"))
           (impl-suffixes '(".c" ".cpp" ".cc" ".C" ".frag" ".cu" ".cl"))
           (search-dirs '("" "../src" "../include" "../include/ud" "../../src"))
           (chck-suffixes (cond ((string-match file-suffix (mapconcat 'identity impl-suffixes "\\|"))
                                 decl-suffixes)
                                ((string-match file-suffix (mapconcat 'identity decl-suffixes "\\|"))
                                 impl-suffixes))))
        (dolist (cur-suffix chck-suffixes)
          (dolist (cur-dir search-dirs)
            (let ((cur-filename (concat file-dir cur-dir "/" file-name cur-suffix)))
                (if (file-exists-p cur-filename)
                    (find-file cur-filename))))))))

;; ------------------- C++ coding preferences ----------------
(require 'cc-mode)
(c-add-style "Google" google-c-style)

(setq c-default-style '((c++-mode . "google") (c-mode . "google")))
(setq-default indent-tabs-mode nil)

(defun my-c-mode-hook ()
  (setq indent-tabs-mode nil)
  (local-set-key (kbd "C-c o") 'switch-decl-impl)
  (linum-mode)
  (column-number-mode)
  (auto-fill-mode 80)
  (irony-mode)
  (flycheck-mode)
  (abbrev-mode)
  (column-enforce-mode)
  (company-mode)
  )

(add-hook 'c-mode-common-hook 'my-c-mode-hook)
(add-hook 'c++-mode-common-hook 'my-c-mode-hook)

(eval-after-load 'company
  '(add-to-list 'company-backends 'company-irony))
(add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
(add-hook 'irony-mode-hook 'irony-eldoc)

(eval-after-load 'flycheck
  '(add-to-list 'flycheck-checkers 'irony))

(setq gdb-many-windows t)

;; ----------------------- Python programming --------------------------
(setq
 python-shell-interpreter "ipython"
 python-shell-interpreter-args "--pylab"
 python-shell-prompt-regexp "In \\[[0-9]+\\]: "
 python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
 python-shell-completion-setup-code
   "from IPython.core.completerlib import module_completion"
 python-shell-completion-module-string-code
   "';'.join(module_completion('''%s'''))\n"
 python-shell-completion-string-code
   "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")

;; ------------------- Key bindings ---------------------------
(global-set-key [f2] 'eshell)
(global-set-key [f3] 'ispell-region)
(global-set-key [f4] 'man)
(if (eq system-type 'darwin)
    (progn
      (global-set-key [f5] 'previous-error)
      (global-set-key [f6] 'next-error)
      (global-set-key [f7] 'compile))
  (progn
    (global-set-key [f9] 'previous-error)
    (global-set-key [f10] 'next-error)
    (global-set-key [f11] 'compile)))
(global-set-key "\C-x\C-c" 'compile)
(global-set-key "\C-x\C-z" 'm-compile-unit)
(global-set-key (kbd "s-r") 'flymake-display-err-menu-for-current-line)
(global-set-key (kbd "s-c") 'flymake-compile)
(global-set-key "\C-x\C-b" 'electric-buffer-list)
(global-set-key "\C-x\C-b" 'electric-buffer-list)
(global-set-key (kbd "C-c RET") 'company-complete-common)

(setq irony-additional-clang-options "-std=c++11")