;; ------------ OS custom ------------
(if (eq system-type 'windows-nt)
    (progn
      (defconst m-make-command "msbuild")
      (defconst m-c-obj-ext "obj"))
  (progn
    (defconst m-make-command "make")
    (defconst m-c-obj-ext "o")))

;; ------------ Custom Variables ------
(custom-set-variables
 '(inhibit-startup-screen t)
 '(case-fold-search t)
 '(global-font-lock-mode t nil (font-lock))
 '(mouse-wheel-mode t nil (mwheel))
 '(show-paren-mode t nil (paren))
 '(transient-mark-mode t)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify))
 '(desktop-buffers-not-to-save "\\(^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|.*_flymake.*\\)$")
 '(desktop-files-not-to-save "^/[^/:]*:\\|.*_flymake\\..*")
;; '(x-select-enable-clipboard nil)
)

;; -------------------- Extra loads  --------------------------

(if (not (boundp 'emacs-d-dir))
    (defconst emacs-d-dir "~/.emacs.d"))

(add-to-list 'load-path (concat emacs-d-dir "/plugins/"))
(add-to-list 'load-path (concat emacs-d-dir "/plugins/autocomplete/"))
(add-to-list 'load-path (concat emacs-d-dir "/plugins/yasnippet/"))
(add-to-list 'load-path (concat emacs-d-dir "/plugins/color-theme-6.6.0/"))

(require 'yasnippet)
(yas/global-mode 1)
(require 'glsl-mode)
(require 'cuda-mode)
(require 'ws-trim)
(require 'auto-complete)
(require 'auto-complete-clang)
(require 'google-c-style)
(require 'compile)
(setq fci-rule-column 80)
(require 'fill-column-indicator)

(require 'cmake-mode)
(add-to-list 'auto-mode-alist '("CMakeLists\\.txt\\'" . cmake-mode))
(add-to-list 'auto-mode-alist '("\\.cmake\\'" . cmake-mode))
(autoload 'magit-status "magit" nil t)

;; ------------------- My Functions ----------------------------
(setq compile-command m-make-command)

(defun m-compile-unit ()
  (interactive)
  (let ((buf-name (buffer-name)))
    (when (string-match "^\\(.*\\)\\.\\([^.]*\\)$" buf-name)
      (let ((name (match-string 1 buf-name))
            (suffix (match-string 2 buf-name)))
        (cond ((or (string-match suffix "c\\|cc\\|C\\|cpp") (string-match suffix "h\\|hpp"))
               (compile (format "%s %s.%s" m-make-command name m-c-obj-ext))))))))

;; Switch fromm *.<impl> to *.<head> and vice versa
(defun switch-decl-impl ()
  (interactive)
  (when (file-name-extension buffer-file-name)
    (let* ((file-dir (file-name-directory buffer-file-name))
           (file-name (file-name-nondirectory (file-name-sans-extension buffer-file-name)))
           (file-suffix (file-name-extension buffer-file-name))
           (decl-suffixes '(".h" ".hpp" ".hh" ".vert"))
           (impl-suffixes '(".c" ".cpp" ".cc" ".C" ".frag" ".cu" ".cl"))
           (search-dirs '("" "../src" "../include" "../include/ud" "../../src"))
           (chck-suffixes (cond ((string-match file-suffix (mapconcat 'identity impl-suffixes "\\|"))
                                 decl-suffixes)
                                ((string-match file-suffix (mapconcat 'identity decl-suffixes "\\|"))
                                 impl-suffixes))))
        (dolist (cur-suffix chck-suffixes)
          (dolist (cur-dir search-dirs)
            (let ((cur-filename (concat file-dir cur-dir "/" file-name cur-suffix)))
                (if (file-exists-p cur-filename)
                    (find-file cur-filename))))))))

(defun m-flymake-it ()
  (interactive)
  (let ((flymake-it (executable-find "flymake-it")))
    (if flymake-it
        (call-process flymake-it))))

;; ------------------ Backup and Autosaves --------------------------------
;; backup
(defconst m-save-dir "~/.saves")
(make-directory m-save-dir t)

(setq backup-by-copying t)
(setq backup-directory-alist '(("."  . "~/.saves")))
(setq delete-old-versions t)
(setq kept-new-versions 6)
(setq kept-old-versions 2)
(setq version-control t)

(setq delete-old-versions t
  kept-new-versions 6
  kept-old-versions 2
  version-control t)

;; autosave
(defvar autosave-dir m-save-dir)

(defun auto-save-file-name-p (filename)
  (string-match "^#.*#$" (file-name-nondirectory filename)))

(defun make-auto-save-file-name ()
  (concat m-save-dir
          (if buffer-file-name
              (concat "#" (file-name-nondirectory buffer-file-name) "#")
            (expand-file-name
             (concat "#%" (buffer-name) "#")))))

;; ------------------ Prefs ---------------------------------
;;(put 'narrow-to-region 'disabled nil)
;;(put 'set-goal-column 'disabled nil)
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode)
(setq-default tab-width 4)

(set-buffer-file-coding-system 'utf-8 'utf-8-unix)
(set-default buffer-file-coding-system 'utf-8-unix)
(set-default-coding-systems 'utf-8-unix)
(set-default default-buffer-file-coding-system 'utf-8-unix)
(prefer-coding-system 'utf-8-unix)
(setq visible-bell t)

(add-hook 'before-save-hook '(lambda () (whitespace-cleanup)))

;; ------------------ Color Theme -----------------------
(require 'color-theme)
(color-theme-initialize)
(color-theme-infodoc)
;;(color-theme-jb-simple)
(color-theme-comidia)

;; ------------------- Key bindings ---------------------------
(global-set-key [f2] 'eshell)
(global-set-key [f3] 'ispell-region)
(global-set-key [f4] 'man)
(if (eq system-type 'darwin)
    (progn
      (global-set-key [f5] 'previous-error)
      (global-set-key [f6] 'next-error)
      (global-set-key [f7] 'compile))
  (progn
    (global-set-key [f9] 'previous-error)
    (global-set-key [f10] 'next-error)
    (global-set-key [f11] 'compile)))
(global-set-key "\C-x\C-c" 'compile)
(global-set-key "\C-x\C-z" 'm-compile-unit)
(global-set-key (kbd "s-r") 'flymake-display-err-menu-for-current-line)
(global-set-key (kbd "s-c") 'flymake-compile)
(global-set-key "\C-x\C-b" 'electric-buffer-list)

;; ------------------- C coding preferences ----------------
(require 'cc-mode)
(defconst m-c-style
  '("bsd"
    (c-space-always-indent . t)
    (c-basic-offset . 4))
  "My C++ Style")
(c-add-style "my" m-c-style)
(c-add-style "Google" google-c-style)

(setq c-default-style '((c++-mode . "google") (c-mode . "google")))
(setq-default indent-tabs-mode nil)

(defun my-c-mode-hook ()
  (setq indent-tabs-mode nil)
  (setq c-indent-level 4)
  (local-set-key (kbd "C-c o") 'switch-decl-impl)
  (linum-mode)
  (column-number-mode)
  (fci-mode)
  (if (file-exists-p "Makefile")
      (flymake-mode)))

(add-hook 'c-mode-common-hook 'google-set-c-style)
(add-hook 'c-mode-common-hook 'my-c-mode-hook)
(add-hook 'c++-mode-common-hook 'my-c-mode-hook)

(defun my-cmode-clang-hook()
  (auto-complete-mode)
  (setq ac-auto-start nil)
  (setq ac-expand-on-auto-complete nil)
  (setq ac-quick-help-delay 0.3)
  (define-key c-mode-base-map (kbd "C->") 'ac-complete-clang))

(let ((clang-exec (executable-find "clang")))
  (if clang-exec
      (progn
        (require 'auto-complete-clang)
        (add-hook 'c-mode-common-hook 'my-cmode-clang-hook)
        (add-hook 'c++-mode-common-hook 'my-cmode-clang-hook))))

;;(add-hook 'c++-mode-common-hook 'my-cmode-clang-hook)
;;(add-hook 'c-mode-common-hook 'my-cmode-clang-hook)
;;(add-to-list 'compilation-error-regexp-alist
;;             '(anoying-gcc "^In file included from \\(.*\\):\\([0-9]+\\)" 1 2))


;;(when (load "flymake" t)
;;  (add-to-list 'flymake-allowed-file-name-masks
;;;               '("\\.hpp\\'" flymake-master-make-header-init
;;       flymake-master-cleanup)))
(setq gdb-many-windows t)